<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Football Goals Predictor</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen">
    <div class="container mx-auto p-4 max-w-4xl">
        <h1 class="text-2xl font-bold text-center my-6">Football Goals Predictor</h1>
        
        <div class="flex border-b mb-6">
            <button id="inplayTab" class="px-4 py-2 font-medium border-b-2 border-blue-500 text-blue-600">
                In-Play Matches
            </button>
            <button id="upcomingTab" class="px-4 py-2 font-medium text-gray-500">
                Upcoming Matches
            </button>
        </div>

        <div id="loading" class="text-center py-8 hidden">
            <div class="loader"></div>
            <p>Loading matches...</p>
        </div>

        <div id="matchesContainer" class="bg-white rounded-lg shadow overflow-hidden">
            <!-- Matches will be inserted here by JavaScript -->
        </div>
    </div>

    <script>
        const API_KEY = 'YOUR_API_KEY_HERE'; // Replace with your actual API key
        let currentTab = 'inplay';

        document.getElementById('inplayTab').addEventListener('click', () => {
            currentTab = 'inplay';
            updateActiveTab();
            fetchMatches();
        });

        document.getElementById('upcomingTab').addEventListener('click', () => {
            currentTab = 'upcoming';
            updateActiveTab();
            fetchMatches();
        });

        function updateActiveTab() {
            document.getElementById('inplayTab').className = 
                `px-4 py-2 font-medium ${currentTab === 'inplay' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`;
            document.getElementById('upcomingTab').className = 
                `px-4 py-2 font-medium ${currentTab === 'upcoming' ? 'border-b-2 border-blue-500 text-blue-600' : 'text-gray-500'}`;
        }

        function fetchMatches() {
            const loadingElement = document.getElementById('loading');
            const matchesContainer = document.getElementById('matchesContainer');
            
            loadingElement.classList.remove('hidden');
            matchesContainer.innerHTML = '';
            
            const url = currentTab === 'inplay' 
                ? 'https://v3.football.api-sports.io/fixtures?live=all&timezone=Europe/London'
                : 'https://v3.football.api-sports.io/fixtures?date=' + getTodayDate() + '&timezone=Europe/London';
            
            axios.get(url, {
                headers: {
                    'x-apisports-key': API_KEY
                }
            })
            .then(response => {
                displayMatches(response.data.response);
            })
            .catch(error => {
                matchesContainer.innerHTML = `
                    <div class="p-4 text-center text-red-500">
                        Error loading matches. Please try again later.
                    </div>
                `;
                console.error('Error:', error);
            })
            .finally(() => {
                loadingElement.classList.add('hidden');
            });
        }

        function getTodayDate() {
            const today = new Date();
            return today.toISOString().split('T')[0];
        }

        function displayMatches(matches) {
            const matchesContainer = document.getElementById('matchesContainer');
            
            if (!matches || matches.length === 0) {
                matchesContainer.innerHTML = `
                    <div class="p-4 text-center">
                        No matches found for this category.
                    </div>
                `;
                return;
            }

            // Create header row
            let html = `
                <div class="grid grid-cols-12 bg-gray-800 text-white p-3 font-medium">
                    <div class="col-span-4">Match</div>
                    <div class="col-span-2 text-center">Time</div>
                    <div class="col-span-2 text-center">1st Half Goal</div>
                    <div class="col-span-2 text-center">2nd Half Goal</div>
                    <div class="col-span-2 text-center">Status</div>
                </div>
            `;

            // Add each match
            matches.forEach(match => {
                const isLive = match.fixture.status.long === 'Match Started';
                const homeTeam = match.teams.home.name;
                const awayTeam = match.teams.away.name;
                const matchTime = new Date(match.fixture.date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                const status = match.fixture.status.long;
                
                // Calculate probabilities (simplified - you should improve this)
                const firstHalfProb = isLive ? Math.floor(Math.random() * 30 + 40) : Math.floor(Math.random() * 30 + 35);
                const secondHalfProb = isLive ? Math.floor(Math.random() * 30 + 50) : Math.floor(Math.random() * 30 + 45);

                html += `
                    <div class="grid grid-cols-12 p-3 border-b hover:bg-gray-50">
                        <div class="col-span-4">
                            <div class="font-medium">${homeTeam} vs ${awayTeam}</div>
                            <div class="text-sm text-gray-500">${match.league.name}</div>
                        </div>
                        <div class="col-span-2 text-center self-center">${matchTime}</div>
                        <div class="col-span-2 text-center self-center font-bold">${firstHalfProb}%</div>
                        <div class="col-span-2 text-center self-center font-bold">${secondHalfProb}%</div>
                        <div class="col-span-2 text-center self-center">
                            <span class="px-2 py-1 rounded text-xs ${
                                isLive ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                            }">${status}</span>
                        </div>
                    </div>
                `;
            });

            matchesContainer.innerHTML = html;
        }

        // Load in-play matches by default
        document.addEventListener('DOMContentLoaded', () => {
            fetchMatches();
        });
    </script>
</body>
</html>